--- a/frontend/Makefile.am	2017-05-15 03:19:11.000000000 +0200
+++ b/frontend/Makefile.am	2018-01-27 17:14:31.320337766 +0100
@@ -22,7 +22,7 @@
 
 saned_SOURCES = saned.c
 saned_LDADD = ../backend/libsane.la ../sanei/libsanei.la ../lib/liblib.la \
-              $(SYSLOG_LIBS) $(SYSTEMD_LIBS) $(AVAHI_LIBS)
+              $(SYSLOG_LIBS) $(SYSTEMD_LIBS) $(AVAHI_LIBS) -pthread
 
 test_SOURCES = test.c
 test_LDADD = ../lib/liblib.la ../backend/libsane.la
--- a/frontend/Makefile.in	2017-05-22 15:38:36.000000000 +0200
+++ b/frontend/Makefile.in	2018-01-27 17:53:11.208173688 +0100
@@ -389,7 +389,7 @@
 
 saned_SOURCES = saned.c
 saned_LDADD = ../backend/libsane.la ../sanei/libsanei.la ../lib/liblib.la \
-              $(SYSLOG_LIBS) $(SYSTEMD_LIBS) $(AVAHI_LIBS)
+              $(SYSLOG_LIBS) $(SYSTEMD_LIBS) $(AVAHI_LIBS) -pthread
 
 test_SOURCES = test.c
 test_LDADD = ../lib/liblib.la ../backend/libsane.la
--- a/frontend/saned.c	2017-03-22 01:43:41.000000000 +0100
+++ b/frontend/saned.c	2018-01-27 17:21:36.103307722 +0100
@@ -49,6 +49,7 @@
 #include <assert.h>
 #include <errno.h>
 #include <fcntl.h>
+#include <semaphore.h>
 #include <netdb.h>
 #include <signal.h>
 #include <stdio.h>
@@ -251,6 +252,7 @@
 static int num_handles;
 static int debug;
 static int run_mode;
+static sem_t* sem = SEM_FAILED;
 static Handle *handle;
 static char *bind_addr;
 static union
@@ -301,6 +303,7 @@
 #define SANED_RUN_DEBUG  1
 #define SANED_RUN_ALONE  2
 
+static void close_handle (int h);
 
 #define DBG_ERR  1
 #define DBG_WARN 2
@@ -473,8 +476,7 @@
   running = 1;
 
   for (i = 0; i < num_handles; ++i)
-    if (handle[i].inuse)
-      sane_close (handle[i].handle);
+    close_handle (i);
 
   sane_exit ();
   sanei_w_exit (&wire);
@@ -532,6 +534,8 @@
   if (h >= 0 && handle[h].inuse)
     {
       sane_close (handle[h].handle);
+		if(sem != SEM_FAILED)
+			sem_post(sem);
       handle[h].inuse = 0;
     }
 }
@@ -552,6 +556,32 @@
   return h;
 }
 
+static int access_or_wait_open()
+{
+	int s;
+	struct timespec ts;
+	sem_t* sem_tmp = SEM_FAILED;
+	
+	/* first, notify that we want to open the device */
+	
+	sem_tmp = sem_open("saned.open.sem", O_CREAT, 0770, 0);
+	if(sem_tmp == SEM_FAILED)
+		DBG (DBG_ERR, "process_request: cannot open or create semaphore `saned.open.sem' - %s\n", strerror(errno));
+	else
+		sem_post(sem_tmp);/* increment semaphore and that's all */
+	sem_close(sem_tmp);
+
+	clock_gettime(CLOCK_REALTIME, &ts);
+	ts.tv_sec += 2;
+
+	while((s = sem_timedwait(sem, &ts)) == -1 && errno == EINTR) continue;
+	if (s == -1)
+	{
+		DBG (DBG_WARN, "process_request: sem error - %s\n", strerror(errno));
+	}
+	
+	return s;
+}
 
 
 /* Convert a number of bits to an 8-bit bitmask */
@@ -1816,6 +1846,7 @@
   SANE_Handle be_handle;
   SANE_Word h, word;
   int i;
+  int ret;
 
   DBG (DBG_DBG, "process_request: waiting for request\n");
   sanei_w_set_dir (w, WIRE_DECODE);
@@ -1838,10 +1869,18 @@
       {
 	SANE_Get_Devices_Reply reply;
 
+	ret = access_or_wait_open();
+	if (ret == -1)
+	{
+		DBG (DBG_WARN, "process_request: sem error - %s\n", strerror(errno));
+	}
+	/* still do the sane_get_devices(). we'll just not see all busy devices */
 	reply.status =
 	  sane_get_devices ((const SANE_Device ***) &reply.device_list,
 			    SANE_TRUE);
 	sanei_w_reply (w, (WireCodecFunc) sanei_w_get_devices_reply, &reply);
+	if(ret != -1)
+		sem_post(sem);
       }
       break;
 
@@ -1900,7 +1939,7 @@
 
 	  resource = strdup (device_list[0]->name);
 	}
-
+  ret = -1;
 	if (strchr (resource, ':'))
 	  *(strchr (resource, ':')) = 0;
 
@@ -1919,9 +1958,16 @@
 		 resource);
 	    free (resource);
 	    memset (&reply, 0, sizeof (reply));	/* avoid leaking bits */
-	    reply.status = sane_open (name, &be_handle);
+
+	 	reply.status = SANE_STATUS_DEVICE_BUSY;
+		ret = access_or_wait_open();
+		if (ret == -1)
+			DBG (DBG_WARN, "process_request: sem error - %s\n", strerror(errno));
+		else
+			reply.status = sane_open (name, &be_handle);
+
 	    DBG (DBG_MSG, "process_request: sane_open returned: %s\n", 
-		 sane_strstatus (reply.status));
+		 	sane_strstatus (reply.status));
 	  }
 
 	if (reply.status == SANE_STATUS_GOOD)
@@ -1935,7 +1981,13 @@
 		reply.handle = h;
 	      }
 	  }
-
+		else
+		{
+			if(ret != -1)
+				sem_post(sem);
+      
+		}
+	
 	can_authorize = 0;
 
 	sanei_w_reply (w, (WireCodecFunc) sanei_w_open_reply, &reply);
@@ -2314,13 +2366,20 @@
 
   if (init (&wire) < 0)
     return;
+    
+	sem = sem_open("saned.sem", O_CREAT, 0770, 1);
+	if(sem == SEM_FAILED)
+		DBG (DBG_ERR, "handle_connection: cannot open or create semaphore `saned.sem' - %s\n",strerror(errno));
 
   while (1)
     {
       reset_watchdog ();
       if (process_request (&wire) < 0)
 	break;
-    }  
+    }
+    
+	sem_close(sem);
+	/*sem_unlink(name);*/
 }
 
 static void
